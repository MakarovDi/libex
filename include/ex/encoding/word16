#ifndef    EX_ENCODING_WORD_H
#   define EX_ENCODING_WORD_H


#include <cstdint>
#include "ex/range_check"


namespace ex
{

#pragma pack(push, 1)


struct word16 final
{
public:
    word16()
    {
    }


    word16(uint16_t word) : value(word)
    {
    }


    word16(int word) : value(uint16_t(word))
    {
        ex::range_check(word, int(std::numeric_limits<uint16_t>::max()));
    }


    word16(uint8_t low) :
        low(low),
        hi(0)
    {
    }


    word16(uint8_t hi, uint8_t low) :
        low(low),
        hi(hi)
    {
    }


    operator int() const { return value; }

public:
    word16& operator +=(word16 w)
    {
        value += w.value;
        return *this;
    }


    word16& operator -=(word16 w)
    {
        value -= w.value;
        return *this;
    }


    word16& operator *=(word16 w)
    {
        value *= w.value;
        return *this;
    }


    word16& operator /=(word16 w)
    {
        value /= w.value;
        return *this;
    }


    word16& operator |=(word16 w)
    {
        value |= w.value;
        return *this;
    }


    word16& operator ^=(word16 w)
    {
        value ^= w.value;
        return *this;
    }


    word16& operator >>=(word16 w)
    {
        value >>= w.value;
        return *this;
    }


    word16& operator <<=(word16 w)
    {
        value <<= w.value;
        return *this;
    }


public:
    union
    {
        uint16_t value;

        struct
        {
            uint8_t low : 8;
            uint8_t hi  : 8;
        };
    };
};


#pragma pack(pop)


inline void swap(word16& w1, word16& w2)
{
    std::swap(w1.value, w2.value);
}


}
#endif // EX_ENCODING_WORD_H
