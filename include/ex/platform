#ifndef    EX_PLATFORM_HEADER
#   define EX_PLATFORM_HEADER

//
// see: ex/doc/platform for more details
//

#include "ex/string"


// Check for UNIX-like platform:  Linux, BSD, OsX, Solaris, ...
#if (defined(__unix__) || defined(__unix)) && !defined(_WIN32)
   // GCC define _WIN32 and __unix__ when cross-compilation
#  define PLATFORM_IS_UNIX
#endif


// Check for OSX, iOS, Darwin
#if defined(__APPLE__) && defined(__MACH__)
#  define PLATFORM_IS_APPLE
#endif


// Check for Windows (x86, x64)
#if defined(_WIN32)
#   define PLATFORM_IS_WINDOWS
#endif


#if defined(PLATFORM_IS_UNIX) && defined(__linux__)
#   define PLATFORM_IS_LINUX
#endif


// TODO: check for __CYGWIN64__
// Check for POSIX
#if defined(PLATFORM_IS_UNIX) || defined(__CYGWIN__)
#  include <unistd.h>
#  if defined(_POSIX_VERSION)
#     define PLATFORM_IS_POSIX
#  endif
#endif


// Check for BSD family: *BSD (DragonFly BSD, FreeBSD, OpenBSD, NetBSD), OSX, iOS, Darwin
#if defined(PLATFORM_IS_UNIX) || defined(PLATFORM_IS_APPLE)
#  include <sys/param.h>     // define *BSD macro if BSD
#  if defined(BSD)
#     define PLATFORM_IS_BSD
#  endif
#endif

// check for android platform
#if defined(__ANDROID__)
#   define PLATFORM_IS_ANDROID
#endif


// TODO: x64, x86
// TODO: compiler/environment

// Universal current function's name macro
#if defined(_MSC_VER)
#   define FUNCTION_NAME __FUNCTION__ // MS have a problem with C99 support
#else
#   define FUNCTION_NAME __func__     // C99 standart
#endif


namespace ex
{

// run-time checks
namespace platform
{
	bool is_unix();
	bool is_windows();

	bool is_linux();
	bool is_bsd();
	bool is_apple();
	bool is_posix();
	bool is_android();

	String info(); // check definitions from this module
	String defs(); // check platform-dependent definitions
}


}


// Platform class

#endif