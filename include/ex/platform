#ifndef    EX_PLATFORM_HEADER
#   define EX_PLATFORM_HEADER

//
// see: ex/doc/platform for more details
//

//
// TODO: split to macro and functions
//

#include "ex/string"


// Check for UNIX-like platform:  Linux, BSD, OsX, Solaris, ...
#if (defined(__unix__) || defined(__unix)) && !defined(_WIN32)
   // GCC define _WIN32 and __unix__ when cross-compilation
#  define PLATFORM_IS_UNIX
#endif

// Check for OSX, iOS, Darwin
#if defined(__APPLE__) && defined(__MACH__)
#  define PLATFORM_IS_APPLE
#endif

// Check for Windows (x86, x64)
#if defined(_WIN32)
#   define PLATFORM_IS_WINDOWS
#endif

#if defined(PLATFORM_IS_UNIX) && defined(__linux__)
#   define PLATFORM_IS_LINUX
#endif

// Check for POSIX
#if defined(PLATFORM_IS_UNIX) || defined(__CYGWIN__)
#  include <unistd.h>
#  if defined(_POSIX_VERSION)
#     define PLATFORM_IS_POSIX
#  endif
#endif

// Check for BSD family: *BSD (DragonFly BSD, FreeBSD, OpenBSD, NetBSD), OSX, iOS, Darwin
#if defined(PLATFORM_IS_UNIX) || defined(PLATFORM_IS_APPLE)
#  include <sys/param.h>     // provides BSD macro on *BSD
#  if defined(BSD)
#     define PLATFORM_IS_BSD
#  endif
#endif

// check for android platform
#if defined(__ANDROID__)
#   define PLATFORM_IS_ANDROID
#endif


// Compiler detection

#if defined(__clang__)                            // Clang/LLVM
#   define COMPILER_IS_CLANG
#endif

#if defined(__ICC) || defined(__INTEL_COMPILER) // ICC/ICPC
#   define COMPILER_IS_INTEL
#endif

#if defined(__HP_cc) || defined(__HP_aCC)       // Hewlett-Packard C/aC++
#   define COMPILER_IS_HP
#endif

#if defined(__IBMC__) || defined(__IBMCPP__)    // IBM XL C/C++
#   define COMPILER_IS_IBM
#endif

#if defined(__PGI)                              // Portland Group PGCC/PGCPP
#   define COMPILER_IS_PORTLAND
#endif

#if defined(__SUNPRO_C) || defined(__SUNPRO_CC) // Oracle Solaris Studio
#   define COMPILER_IS_SUN
#endif

#if defined(_MSC_VER)                           // MS Compiler
#   define COMPILER_IS_MSC
#endif

#if (defined(__GNUC__) || defined(__GNUG__)) && !defined(COMPILER_IS_INTEL)  // GNU Compiler
#   define COMPILER_IS_GNU
#endif


// Environment detection

#if defined(__CYGWIN__)
#   define ENVIRONMENT_IS_CYGWIN
#elif defined(__MINGW32__) || defined(__MINGW64__)
#   define ENVIRONMENT_IS_MINGW
#else
#   define ENVIRONMENT_IS_NATIVE
#endif


// Processor detection

#if defined(__ia64) || defined(__itanium__) || defined(_M_IA64) // Itanium
#   define PROCESSOR_IS_IA64
#elif defined(__powerpc__) || defined(__ppc__) || defined(__PPC__)
#   define PROCESSOR_IS_POWERPC
#elif defined(__sparc)
#   define PROCESSOR_IS_SPARC
#endif

#if defined(__x86_64__) || defined(_M_X64)
#   define PLATFORM_IS_x64
#elif defined(__i386) || defined(_M_IX86)
#   define PLATFORM_IS_x86
#endif


// Universal current function's name macro
#if defined(COMPILER_IS_MSC)
#   define FUNCTION_NAME __FUNCTION__ // MS have a problem with C99 support
#else
#   define FUNCTION_NAME __func__     // C99 standart
#endif



namespace ex
{


// run-time checks
namespace platform
{
    constexpr bool is_unix();
    constexpr bool is_windows();

    constexpr bool is_linux();
    constexpr bool is_bsd();
    constexpr bool is_apple();
    constexpr bool is_posix();
    constexpr bool is_android();

    constexpr bool is_x64();
    constexpr bool is_x86();

    String defs();          // check definitions from this module
    String compiler_defs(); // check platform-dependent definitions for diagnostic needs
}


}


// Platform class

#endif