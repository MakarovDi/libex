#ifndef EX_RANGE_CHECK_H
#define EX_RANGE_CHECK_H


#include <type_traits>
#include <limits>
#include <stdexcept>

#include "ex/common/policy"


//
// Usage:
// ------
//
// Case 1:
//
//  virtual uint32_t your_function(uint32_t critical_weight) override
//  {
//       // input: int-value, output: int-value
//       int result = some_lib::get_smth_count(range_check_cast<int>(critical_weight)); // can throw overflow_error
//
//       ex::range_check<uint32_t>(result); // can throw overflow_error
//       return uint32_t(result);
//  }
//
// Case 2:
//
//  bool your_function() noexcept
//  {
//       //  output: int-value
//       int smth_count = some_lib::get_smth_count();
//
//       range_check_assert<unsigned int>(smth_count); // use assert instead of throw exception
//
//       // input: unsigned int, output: bool
//       return some_other_lib::test_smth(result)
//  }
//


namespace ex
{


namespace range_check_private // forward declaration
{
    template
    <
        typename Source,
        typename Dest,
        typename NoticePolicy,
        bool=std::is_same<Source, Dest>::value
    >
    struct TypeSplitter;

    struct AssertNotice;
}


template
<
    typename Dest,
    typename NoticePolicy = ex::policy::DefaultNotice,
    typename Source
>
void range_check(Source value)
{
    static_assert(std::is_arithmetic<Source>::value, "value must be arithmetic type");
    static_assert(std::is_arithmetic<Dest>::value, "destination type must be arithmetic");

    range_check_private::TypeSplitter<Source, Dest, NoticePolicy>::check(value);
}


template
<
    typename NoticePolicy = ex::policy::DefaultNotice,
    typename T
>
void range_check(T value, T max)
{
    if (value > max)
        NoticePolicy::notice("wrong value range");
}


template
<
    typename NoticePolicy = ex::policy::DefaultNotice,
    typename T
>
void range_check(T value, T min, T max)
{
    if (value > max || value < min)
        NoticePolicy::notice("wrong value range");
}


template
<
    typename Dest,
    typename Source
>
Dest range_check_cast(Source value)
{
    range_check<Dest, policy::ThrowNotice<std::overflow_error>>(value);

    return static_cast<Dest>(value);
}



namespace range_check_private
{
    static constexpr char message[] = "value overflows destination type (range_check)";

    enum DestSize { kSmaller, kSame, kLarger };


    template <typename Source, typename Dest>
    constexpr DestSize detect_dest_size_mode()
    {
        return (sizeof(Dest) > sizeof(Source)) ? DestSize::kLarger  :
               (sizeof(Dest) < sizeof(Source)) ? DestSize::kSmaller :
               DestSize::kSame;
    }

    template
    <
        typename Source,
        typename Dest,
        typename NoticePolicy,
        DestSize = detect_dest_size_mode<Source, Dest>(),
        bool = std::is_signed<Source>::value,
        bool = std::is_signed<Dest>::value
    >
    struct CheckMethodSplitter;


    template <typename Source, typename Dest, typename NoticePolicy>
    struct TypeSplitter <Source, Dest, NoticePolicy, true>
    {
        inline static void check(Source) {} // ranges of same types are same
    };


    template <typename Source, typename Dest, typename NoticePolicy>
    struct TypeSplitter <Source, Dest, NoticePolicy, false>
    {
        inline static void check(Source value) // check ranges of different types
        {
            CheckMethodSplitter<Source, Dest, NoticePolicy>::check(value);
        }
    };


    // int32 -> uint32
    template <typename Source, typename Dest, typename NoticePolicy>
    struct CheckMethodSplitter<Source, Dest, NoticePolicy, DestSize::kSame, true, false>
    {
        inline static void check(Source value)
        {
            if (value < 0)
                NoticePolicy::notice(message);
        }
    };


    // uint32 -> int32
    template <typename Source, typename Dest, typename NoticePolicy>
    struct CheckMethodSplitter<Source, Dest, NoticePolicy, DestSize::kSame, false, true>
    {
        inline static void check(Source value)
        {
            if (value > Source(std::numeric_limits<Dest>::max()))
                NoticePolicy::notice(message);
        }
    };


    // uint32 -> uint64
    template <typename Source, typename Dest, typename NoticePolicy>
    struct CheckMethodSplitter<Source, Dest, NoticePolicy, DestSize::kLarger, false, false>
    {
        inline static void check(Source value) { }
    };


    // uint32 -> int64
    template <typename Source, typename Dest, typename NoticePolicy>
    struct CheckMethodSplitter<Source, Dest, NoticePolicy, DestSize::kLarger, false, true>
    {
        inline static void check(Source value) { }
    };


    // int32 -> uint64
    template <typename Source, typename Dest, typename NoticePolicy>
    struct CheckMethodSplitter<Source, Dest, NoticePolicy, DestSize::kLarger, true, false>
    {
        inline static void check(Source value)
        {
            if (value < 0)
                NoticePolicy::notice(message);
        }
    };


    // int32 -> int64
    template <typename Source, typename Dest, typename NoticePolicy>
    struct CheckMethodSplitter<Source, Dest, NoticePolicy, DestSize::kLarger, true, true>
    {
        inline static void check(Source value) { }
    };


    // uint64 -> uint32
    template <typename Source, typename Dest, typename NoticePolicy>
    struct CheckMethodSplitter<Source, Dest, NoticePolicy, DestSize::kSmaller, false, false>
    {
        inline static void check(Source value)
        {
            if (value > std::numeric_limits<Dest>::max())
                NoticePolicy::notice(message);
        }
    };


    // uint64 -> int32
    template <typename Source, typename Dest, typename NoticePolicy>
    struct CheckMethodSplitter<Source, Dest, NoticePolicy, DestSize::kSmaller, false, true>
    {
        inline static void check(Source value)
        {
            if (value > std::numeric_limits<Dest>::max())
                NoticePolicy::notice(message);
        }
    };


    // int64 -> uint32
    template <typename Source, typename Dest, typename NoticePolicy>
    struct CheckMethodSplitter<Source, Dest, NoticePolicy, DestSize::kSmaller, true, false>
    {
        inline static void check(Source value)
        {
            if (value < 0 || value > std::numeric_limits<Dest>::max())
                NoticePolicy::notice(message);
        }
    };


    // int64 -> int32
    template <typename Source, typename Dest, typename NoticePolicy>
    struct CheckMethodSplitter<Source, Dest, NoticePolicy, DestSize::kSmaller, true, true>
    {
        inline static void check(Source value)
        {
            if (value < std::numeric_limits<Dest>::min() || value > std::numeric_limits<Dest>::max())
                NoticePolicy::notice(message);
        }
    };

};

}


#endif // EX_RANGE_CHECK_H
