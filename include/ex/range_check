#ifndef EX_RANGE_CHECK_H
#define EX_RANGE_CHECK_H


#include <type_traits>
#include <limits>
#include <stdexcept>

#include "ex/policy/notice"


//
// Usage:
// ------
//
// Case 1:
//
//  virtual uint32_t your_function(uint32_t critical_weight) override
//  {
//       // input: int-value, output: int-value
//       int result = some_lib::get_smth_count(range_check_cast<int>(critical_weight)); // can throw overflow_error
//
//       ex::range_check<uint32_t>(result); // can throw overflow_error
//       return uint32_t(result);
//  }
//
// Case 2:
//
//  bool your_function() noexcept
//  {
//       //  output: int-value
//       int smth_count = some_lib::get_smth_count();
//
//       range_check_assert<unsigned int>(smth_count); // use assert instead of throw exception
//
//       // input: unsigned int, output: bool
//       return some_other_lib::test_smth(result)
//  }
//


namespace ex
{

    namespace range_check_private // forward declaration
    {
        template <typename TSource, typename TDest, typename NoticePolicy, bool = std::is_same<TSource, TDest>::value>
        struct SameTypeFilter;

        struct AssertNotice;
    }


    template
    <
        typename TDest,
        typename NoticePolicy = policy::ThrowNotice<std::overflow_error>,
        typename TSource
    >
    void range_check(TSource value)
    {
        static_assert(std::is_arithmetic<TSource>::value, "value must be arithmetic type");
        static_assert(std::is_arithmetic<TDest>::value, "destination type must be arithmetic");

        range_check_private::SameTypeFilter<TSource, TDest, NoticePolicy>::check(value);
    }


    template <typename TDest, typename TSource>
    void range_check_assert(TSource value)
    {
        range_check<TDest, policy::AssertNotice>(value);
    }


    template
    <
        typename TDest,
        typename TException = std::overflow_error,
        typename TSource
    >
    TDest range_check_cast(TSource value)
    {
        static_assert(std::is_base_of<std::exception, TException>::value, "TException must be derived from std::exception");

        range_check<TDest>(value);

        return static_cast<TDest>(value);
    }



    namespace range_check_private
    {
        static const char message[] = "value overflows destination type (range_check)";

        enum DestSize { kSmaller, kSame, kLarger };


        template <typename TSource, typename TDest>
        constexpr DestSize detect_dest_size_mode()
        {
            return (sizeof(TDest) > sizeof(TSource)) ? DestSize::kLarger  :
                   (sizeof(TDest) < sizeof(TSource)) ? DestSize::kSmaller :
                   DestSize::kSame;
        }

        template
        <
            typename TSource,
            typename TDest,
            typename NoticePolicy,
            DestSize = detect_dest_size_mode<TSource, TDest>(),
            bool = std::is_signed<TSource>::value,
            bool = std::is_signed<TDest>::value
        >
        struct CheckMethodSplitter;


        template <typename TSource, typename TDest, typename NoticePolicy>
        struct SameTypeFilter <TSource, TDest, NoticePolicy, true>
        {
            inline static void check(TSource) {} // ranges of same types are same
        };


        template <typename TSource, typename TDest, typename NoticePolicy>
        struct SameTypeFilter <TSource, TDest, NoticePolicy, false>
        {
            inline static void check(TSource value) // check ranges of different types
            {
                CheckMethodSplitter<TSource, TDest, NoticePolicy>::check(value);
            }
        };


        // int32 -> uint32
        template <typename TSource, typename TDest, typename NoticePolicy>
        struct CheckMethodSplitter<TSource, TDest, NoticePolicy, DestSize::kSame, true, false>
        {
            inline static void check(TSource value)
            {
                if (value < 0)
                    NoticePolicy::notice(message);
            }
        };


        // uint32 -> int32
        template <typename TSource, typename TDest, typename NoticePolicy>
        struct CheckMethodSplitter<TSource, TDest, NoticePolicy, DestSize::kSame, false, true>
        {
            inline static void check(TSource value)
            {
                if (value > std::numeric_limits<TDest>::max())
                    NoticePolicy::notice(message);
            }
        };


        // uint32 -> uint64
        template <typename TSource, typename TDest, typename NoticePolicy>
        struct CheckMethodSplitter<TSource, TDest, NoticePolicy, DestSize::kLarger, false, false>
        {
            inline static void check(TSource value) { }
        };


        // uint32 -> int64
        template <typename TSource, typename TDest, typename NoticePolicy>
        struct CheckMethodSplitter<TSource, TDest, NoticePolicy, DestSize::kLarger, false, true>
        {
            inline static void check(TSource value) { }
        };


        // int32 -> uint64
        template <typename TSource, typename TDest, typename NoticePolicy>
        struct CheckMethodSplitter<TSource, TDest, NoticePolicy, DestSize::kLarger, true, false>
        {
            inline static void check(TSource value)
            {
                if (value < 0)
                    NoticePolicy::notice(message);
            }
        };


        // int32 -> int64
        template <typename TSource, typename TDest, typename NoticePolicy>
        struct CheckMethodSplitter<TSource, TDest, NoticePolicy, DestSize::kLarger, true, true>
        {
            inline static void check(TSource value) { }
        };


        // uint64 -> uint32
        template <typename TSource, typename TDest, typename NoticePolicy>
        struct CheckMethodSplitter<TSource, TDest, NoticePolicy, DestSize::kSmaller, false, false>
        {
            inline static void check(TSource value)
            {
                if (value > std::numeric_limits<TDest>::max())
                    NoticePolicy::notice(message);
            }
        };


        // uint64 -> int32
        template <typename TSource, typename TDest, typename NoticePolicy>
        struct CheckMethodSplitter<TSource, TDest, NoticePolicy, DestSize::kSmaller, false, true>
        {
            inline static void check(TSource value)
            {
                if (value > std::numeric_limits<TDest>::max())
                    NoticePolicy::notice(message);
            }
        };


        // int64 -> uint32
        template <typename TSource, typename TDest, typename NoticePolicy>
        struct CheckMethodSplitter<TSource, TDest, NoticePolicy, DestSize::kSmaller, true, false>
        {
            inline static void check(TSource value)
            {
                if (value < 0 || value > std::numeric_limits<TDest>::max())
                    NoticePolicy::notice(message);
            }
        };


        // int64 -> int32
        template <typename TSource, typename TDest, typename NoticePolicy>
        struct CheckMethodSplitter<TSource, TDest, NoticePolicy, DestSize::kSmaller, true, true>
        {
            inline static void check(TSource value)
            {
                if (value < std::numeric_limits<TDest>::min() || value > std::numeric_limits<TDest>::max())
                    NoticePolicy::notice(message);
            }
        };

    };

}


// unit tests

//void test1() // uint32 -> uint64
//{
//    range_check<uint64_t>(std::numeric_limits<uint32_t>::min());
//    range_check<uint64_t>(std::numeric_limits<uint32_t>::max());
//
//    printf("test1 done\n");
//}
//
//
//void test2() // uint64 -> int32
//{
//    range_check<uint32_t>(std::numeric_limits<uint64_t>::min());
//    range_check<uint32_t>(uint64_t(std::numeric_limits<uint32_t>::max()));
//
//    try
//    {
//        range_check<uint32_t>(std::numeric_limits<uint64_t>::max());
//    }
//    catch (std::overflow_error&)
//    {
//        printf("test2 done\n");
//    }
//}
//
//
//void test3() // uint32 -> int32
//{
//    range_check<int32_t>(std::numeric_limits<uint32_t>::min());
//    range_check<int32_t>(uint32_t(std::numeric_limits<int32_t>::max()));
//
//    try
//    {
//        range_check<int32_t>(std::numeric_limits<uint32_t>::max());
//
//    }
//    catch(std::overflow_error&)
//    {
//        printf("test3 done\n");
//    }
//}
//
//void test4() //  int32 -> uint32
//{
//
//    range_check<uint32_t>(std::numeric_limits<int32_t>::max());
//
//    try
//    {
//        range_check<uint32_t>(std::numeric_limits<int32_t>::min());
//    }
//    catch(std::overflow_error&)
//    {
//        printf("test4 done\n");
//    }
//}
//
//
//
//void test5() // uint32 -> int64
//{
//    range_check<int64_t>(std::numeric_limits<uint32_t>::min());
//    range_check<int64_t>(std::numeric_limits<uint32_t>::max());
//
//    printf("test5 done\n");
//}
//
//
//void test6() // int32 -> uint64
//{
//    range_check<uint64_t>(std::numeric_limits<int32_t>::max());
//
//    try
//    {
//        range_check<uint64_t>(std::numeric_limits<int32_t>::min());
//    }
//    catch(std::overflow_error&)
//    {
//        printf("test6 done\n");
//    }
//}
//
//
//void test7() // int32 -> int64
//{
//    range_check<int64_t>(std::numeric_limits<int32_t>::min());
//    range_check<int64_t>(std::numeric_limits<int32_t>::max());
//
//    printf("test7 done\n");
//}
//
//
//void test8() // uint64 -> uint32
//{
//    range_check<uint32_t>(std::numeric_limits<uint64_t>::min());
//
//    try
//    {
//        range_check<uint32_t>(std::numeric_limits<uint64_t>::max());
//    }
//    catch(std::overflow_error&)
//    {
//        printf("test8 done\n");
//    }
//}
//
//
//void test9() // int64 -> uint32
//{
//    range_check<uint32_t>(int64_t(std::numeric_limits<uint32_t>::min()));
//
//
//    try
//    {
//        range_check<uint32_t>(std::numeric_limits<int64_t>::max());
//    }
//    catch(std::overflow_error&)
//    {
//    }
//
//    try
//    {
//        range_check<uint32_t>(std::numeric_limits<int64_t>::min());
//    }
//    catch(std::overflow_error&)
//    {
//        printf("test9 done\n");
//    }
//}
//
//
//void test10() // int64 -> int32
//{
//    range_check<int32_t>(int64_t(std::numeric_limits<int32_t>::min()));
//    range_check<int32_t>(int64_t(std::numeric_limits<int32_t>::max()));
//
//
//    try
//    {
//        range_check<int32_t>(std::numeric_limits<int64_t>::max());
//    }
//    catch(std::overflow_error&)
//    {
//    }
//
//    try
//    {
//        range_check<int32_t>(std::numeric_limits<int64_t>::min());
//    }
//    catch(std::overflow_error&)
//    {
//        printf("test10 done\n");
//    }
//}

#endif // EX_RANGE_CHECK_H
