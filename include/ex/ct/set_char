#ifndef    EX_CT_SET_CHAR_H
#   define EX_CT_SET_CHAR_H


#include "ex/common/type"
#include "ex/meta/sequence"
#include "ex/ct/meta_str"


//
// Note: compile-time replace char in const string
//
// Usage:
//
//      constexpr char str[] = "Test1";
//      constexpr auto str2 = ct::set_char<4>(str, '2'); // "Test2"
//

namespace ex
{
namespace ct
{

    template <typename CharType, index_t... left, index_t... right, index_t... indexes>
    constexpr auto set_char(meta_str_type<CharType, indexes...> str, CharType c,
                            ex::integer_sequence<left...>,
                            ex::integer_sequence<right...>)
        -> meta_str_type<CharType, indexes...>
    {
        static_assert(sizeof...(left) + sizeof...(right) + 1 == sizeof...(indexes), "wrong indexes size");

        return { str.c_str[left]..., c, str.c_str[right]... };
    }


    template <index_t idx, typename CharType, index_t... indexes>
    constexpr auto set_char(meta_str_type<CharType, indexes...> str, CharType c)
        -> meta_str_type<CharType, indexes...>
    {
        static_assert(idx < sizeof...(indexes), "index out of range");

        return set_char(str, c,
                        ex::make_integer_sequence<idx>{},
                        ex::make_integer_sequence<sizeof...(indexes), idx+1>{});
    }


    template <index_t idx, typename CharType, index_t N>
    constexpr decltype(auto) set_char(const CharType (&str)[N], CharType c)
    {
        return set_char<idx, CharType>(meta_str(str), c);
    };

}
}


#endif
