#ifndef    EX_CT_BASENAME_H
#   define EX_CT_BASENAME_H


#include "ex/ct/charset"
#include "ex/ct/meta_str"
#include "ex/ct/strfill"


namespace ex
{
namespace ct // compile-time
{

    namespace internal
    {

        template <size_t N, size_t result_idx, size_t path_idx>
        struct basename_iterator
        {
            // TODO: C++17 remake with single constexpr function

            template <typename CharType, size_t N1, size_t... indexes>
            constexpr static auto handle_char(const CharType (& path)[N1],
                                              ct::meta_str_type<CharType, indexes...> result) -> decltype(result)
            {
                return path[path_idx] == ct::charset::slash<CharType>()      ||
                       path[path_idx] == ct::charset::back_slash<CharType>()  ?
                       basename_iterator<N, 0, path_idx+1>::handle_char(path, result) :
                       basename_iterator<N, result_idx+1, path_idx+1>::handle_char(path, ct::set_char<result_idx>(result, path[path_idx]));
            }

        };


        template <size_t N, size_t result_idx>
        struct basename_iterator<N, result_idx, N>
        {
            template <typename CharType, size_t N1, size_t... indexes>
            constexpr static auto handle_char(const CharType (& path)[N1],
                                              ct::meta_str_type<CharType, indexes...> result) -> decltype(result)
            {
                return ct::set_char<result_idx>(result, ct::charset::zero<CharType>());
            }
        };

    }


    //
    // Usage:
    //
    //      static constexpr auto fname = ct::basename("test/file.c");
    //
    //      std::cout << fname;
    //      std::printf(fname);
    //
    // WARN: prefer use it as constexpr static!
    //
    //      static constexpr auto fname = ct::basename("test/file.c")
    //
    //                lea     rcx, _ZZ4mainE5fname ; "file.c"
    //                call    _ZL6printfPKcz_constprop_2 ; printf(char const*,...) [clone]
    //                mov     rcx, cs:_refptr__ZSt4cout
    //                lea     rdx, _ZZ4mainE5fname ; "file.c"
    //                call    _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const*)
    //
    //

    template <typename CharType, size_t N>
    constexpr auto basename(const CharType (&path)[N])
        -> decltype(ct::strpad<CharType, N>())
    {
        return internal::basename_iterator<N-1, 0, 0>::handle_char(path, ct::strpad<CharType, N>());
    }


// unit-tests

//    static_assert( ct::basename("test-path\\file.c") == "file.c");
//    static_assert( ct::basename("test-path/file.c") == "file.c");
//    static_assert( ct::basename("./file.c") == "file.c");
//    static_assert( ct::basename("./file.c") == "file.c");
//    static_assert( ct::basename("") == "");
//    static_assert( ct::basename("/") == "");
//    static_assert( ct::basename("\\") == "");
//    static_assert( ct::basename("") == "");
//
//
//    static_assert( ct::basename(L"test-path\\file.c") == L"file.c");
//    static_assert( ct::basename(L"test-path/file.c") == L"file.c");
//    static_assert( ct::basename(L"./file.c") == L"file.c");
//    static_assert( ct::basename(L"./file.c") == L"file.c");
//    static_assert( ct::basename(L"") == L"");
//    static_assert( ct::basename(L"/") == L"");
//    static_assert( ct::basename(L"") == L"");

}
}


#endif
