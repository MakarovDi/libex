#ifndef    EX_CT_META_STR_H
#   define EX_CT_META_STR_H


#include <iostream>
#include <cstdint>

#include "ex/ct/char"
#include "ex/meta/sequence"
#include "ex/meta/pack"


//
// Note: meta_str_base is a container for a compile-time string
//
// Usage (meta_str)
//
//  * for compile-time string concatenation:
//
//      static constexpr auto str = ct::create_meta_str("File: ") + ct::meta_str(__FILE__);
//      ...
//      std::cout << str << std::endl;
//      std::printf(str);
//
//  * for return compile-time string which can be used in compile-time function:
//
//       template <size_t N>
//       constexpr size_t strlen(const char (&str)[N])
//       {
//            return N - 1;
//       }
//
//
//       template <size_t N>
//       constexpr const char* strdup1(const char (&str)[N])
//       {
//           return str;
//       }
//
//
//       template <size_t N>
//       constexpr auto strdup2(const char (&str)[N])
//          -> decltype (ct::meta_str(str))
//       {
//          return ct::meta_str(str);
//       }
//
//
//       std::array<char, strlen(strdup1("Test"))>       a; // compilation error
//       std::array<char, strlen(strdup2("Test").c_str)> a; // ok
//
//
//  References:
//      doc/schurr_cpp11_tools_for_class_authors.pdf
//

namespace ex
{
namespace ct
{

    template<typename CharType, size_t... indexes>
    struct meta_str_type
    {
        const CharType c_str[sizeof...(indexes) + 1];


        template <size_t N>
        constexpr meta_str_type(const CharType (&str)[N]) :
            c_str{ ct::char_at<indexes>(str)..., 0 }
        {
        }


        constexpr meta_str_type(meta::pack<CharType, indexes>... chars) :
            c_str{ chars..., 0 }
        {
        }


        constexpr meta_str_type(const meta_str_type& str) :
            c_str{ str.c_str[indexes]..., 0 }
        {
        }


        static constexpr size_t size = sizeof...(indexes) + 1;

        constexpr CharType operator[](size_t index) const { return c_str[index]; }
        constexpr operator const CharType* ()       const { return c_str;        }
    };


    template <typename CharType, size_t... indexes>
    std::basic_ostream<CharType>& operator<<(std::basic_ostream<CharType>& stream,
                                             const meta_str_type<CharType, indexes...>& str)
    {
        return stream << str.c_str;
    }


    template<typename CharType, size_t N, size_t... indexes>
    constexpr decltype(auto) meta_str(const CharType (& str)[N], meta::integer_sequence<indexes...>)
    {
        return meta_str_type<CharType, indexes...>(str);
    }


    template<typename CharType, size_t N>
    constexpr decltype(auto) meta_str(const CharType (& str)[N])
    {
        return meta_str(str, meta::make_integer_sequence<N - 1>());
    }

}
}

#endif
