#ifndef    EX_CT_STRFILL_H
#   define EX_CT_STRFILL_H


#include "ex/ct/meta_str"

//
// Usage:
//
//      constexpr static auto ff_str = strfill<char, 20, 'f'>(); // "ffffffff..."
//
//      ...
//
//      std::cout << ff_str;
//
//


namespace ex
{
namespace ct
{

    template <typename CharType, CharType... chars, size_t... indexes>
    constexpr auto strfill(meta::integer_sequence<indexes...>, meta::char_sequence<CharType, chars...>)
        -> ct::meta_str_type<CharType, indexes...>
    {
        return ct::meta_str_type<CharType, indexes...>(chars...);
    }


    template <typename CharType, size_t N, CharType c>
    constexpr auto strfill()
        -> decltype(strfill<CharType>(meta::make_integer_sequence<N>(),
                                      meta::make_char_sequence<CharType, N, c>()))
    {
        return strfill<CharType>(meta::make_integer_sequence<N>(),
                                 meta::make_char_sequence<CharType, N, c>());
    }

}
}


#endif
