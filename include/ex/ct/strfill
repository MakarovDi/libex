#ifndef    EX_CT_STRFILL_H
#   define EX_CT_STRFILL_H


#include "ex/common/type"
#include "ex/ct/meta_str"
#include "ex/ct/charset"

//
// Usage:
//
//      constexpr static auto ff_str = strfill<char, 20, 'f'>(); // "ffffffff..."
//
//      ...
//
//      std::cout << ff_str;
//
//


namespace ex
{
namespace ct
{

    template <typename CharType, CharType... chars, index_t... indexes>
    constexpr auto strfill(ex::integer_sequence<indexes...>, ex::char_sequence<CharType, chars...>)
        -> ct::meta_str_type<CharType, indexes...>
    {
        return ct::meta_str_type<CharType, indexes...>(chars...);
    }


    template <typename CharType, index_t N, CharType c>
    constexpr decltype(auto) strfill()
    {
        return ct::strfill<CharType>(ex::make_integer_sequence<N>(),
                                     ex::make_char_sequence<CharType, N, c>());
    }


    //
    // Note: strpad - generate padding string which is filled with '\0'
    //


    template <typename CharType, index_t N>
    constexpr decltype(auto) strpad()
    {
        return ct::strfill<CharType>(ex::make_integer_sequence<N>(),
                                     ex::make_char_sequence< CharType, N, charset::zero<CharType>() >());
    }


}
}


#endif
