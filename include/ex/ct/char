#ifndef    EX_CT_CHAR_H
#   define EX_CT_CHAR_H


#include <cstdint>
#include <limits>

//#include "ex/ct/charset"




//
// Note: compile-time char-related operations
//


namespace ex
{
namespace ct
{
    static constexpr const size_t npos = std::numeric_limits<size_t>::max();


    namespace internal
    {
        //
        // Note: functions with some limitations or ambiguity
        //

        // unsafe: contains_char("abc", 0) -> false (wrong semantic)
        //         contains_char(nullptr, <any>) -> crash
        template < typename CharType, size_t N >
        constexpr bool contains_char(const CharType (& str)[N], CharType c, size_t idx)
        {
            return idx == N      ? false :
                   str[idx] == c ? true  : internal::contains_char(str, c, idx + 1);
        }


        template <typename TNeed, typename TChar, typename... TRest>
        struct select_char
        {
            static constexpr TNeed value(TChar c, TRest... rest)
            {
                return select_char<TNeed, TRest...>::value(rest...);
            }
        };

        template <typename TNeed, typename... TRest>
        struct select_char <TNeed, TNeed, TRest...>
        {
            static constexpr TNeed value(TNeed c, TRest... rest)
            {
                return c;
            }
        };
    }


    template <size_t index, typename CharType, size_t N>
    constexpr CharType char_at(const CharType (&str)[N])
    {
        return str[index];
    }


    template <typename CharType, size_t N>
    constexpr bool contains_char(const CharType (&str)[N], CharType c)
    {
        return internal::contains_char(str, c, 0);
    }


    template <typename CharType, size_t N>
    constexpr size_t strrchr(const CharType (&str)[N], CharType c, size_t offset = N - 1)
    {
        return offset == 0      ? ct::npos :
               str[offset] == c ? offset   : strrchr(str, c, offset - 1);

    }


    template <typename CharType, size_t N>
    constexpr size_t strlchr(const CharType (&str)[N], CharType c, size_t offset = 0)
    {
        return offset == N      ? ct::npos :
               str[offset] == c ? offset   : strlchr(str, c, offset + 1);
    }

    //
    // Usage:
    //
    //    select_char<wchar_t>('c', L'w', u'6', U'3') => L'w'
    //

    template <typename TNeed, typename TChar, typename... TRest>
    constexpr TNeed select_char(TChar c, TRest... chars)
    {
        return internal::select_char<TNeed, TChar, TRest...>::value(c, chars...);
    }

}
}

#endif
