#ifndef    EX_CT_STRCAT_H
#   define EX_CT_STRCAT_H


#include "ex/ct/meta_str"
#include "ex/ct/strlen"
#include "ex/ct/set_char"
#include "ex/ct/strfill"

//
// Note: compile-time string concatenation
//


namespace ex
{
namespace ct
{
    //
    //  There is a simple solution, but it doesn't work with string like "test\0\0\0" and strpad'ed:
    //
    //
    //    template<typename CharType, size_t N1, size_t N2, size_t... indexes1, size_t... indexes2>
    //    constexpr auto strcat(const CharType (&str1)[N1],
    //                          const CharType (&str2)[N2],
    //                          meta::integer_sequence<indexes1...>,
    //                          meta::integer_sequence<indexes2...>)
    //        -> meta_str_type<CharType, indexes1..., sizeof...(indexes1) + indexes2...>
    //    {
    //        return { str1[indexes1]..., str2[indexes2]... };
    //    }
    //
    //
    //    template<typename CharType, size_t N1, size_t N2>
    //    constexpr decltype(auto) strcat(const CharType (&str1)[N1], const CharType (&str2)[N2])
    //    {
    //        return strcat(str1, str2,
    //                      meta::make_integer_sequence<N1 - 1>(),
    //                      meta::make_integer_sequence<N2 - 1>());
    //    }

    namespace internal
    {

        // TODO: C++17 remake

        template <size_t N, size_t result_idx>
        struct strcat
        {
            template <typename CharType, size_t N1, size_t N2, size_t... indexes>
            constexpr static auto cat(const CharType (&str1)[N1],
                                                const CharType (&str2)[N2],
                                                size_t idx1,
                                                size_t idx2,
                                                ct::meta_str_type<CharType, indexes...> result)
                -> ct::meta_str_type<CharType, indexes...>
            {
                // TODO: \0
                return str1[idx1] != '\0' ? strcat<N, result_idx+1>::cat(str1, str2, idx1+1, idx2, ct::set_char<result_idx>(result, str1[idx1])) :
                       str2[idx2] != '\0' ? strcat<N, result_idx+1>::cat(str1, str2, idx1, idx2+1, ct::set_char<result_idx>(result, str2[idx2])) :
                       strcat<N, N>::cat(str1, str2, 0, 0, result);
            }
        };


        template <size_t N>
        struct strcat<N, N>
        {
            template <typename CharType, size_t N1, size_t N2, size_t... indexes>
            constexpr static auto cat(const CharType (&str1)[N1],
                                                const CharType (&str2)[N2],
                                                size_t idx1,
                                                size_t idx2,
                                                ct::meta_str_type<CharType, indexes...> result)
                -> ct::meta_str_type<CharType, indexes...>
            {
                return result;
            }

        };

    }


    template<typename CharType, size_t N1, size_t N2>
    constexpr decltype(auto) strcat(const CharType (&str1)[N1], const CharType (&str2)[N2])
    {
        return internal::strcat<N1+N2-1, 0>::cat(str1, str2, 0, 0, ct::strpad<CharType, N1+N2-1>());
    }


    template<typename CharType, size_t... indexes1, size_t... indexes2>
    constexpr auto operator+(meta_str_type<CharType, indexes1...> a,
                             meta_str_type<CharType, indexes2...> b)
        -> decltype(strcat(a.c_str, b.c_str)) // stupid MSVC can't deduce this with decltype(auto)
    {
        return strcat(a.c_str, b.c_str);
    }


    template<typename CharType, size_t... indexes, size_t N>
    constexpr auto operator+(meta_str_type<CharType, indexes...> metastr, const CharType (&str)[N])
        -> decltype(metastr + meta_str(str))
    {
        return strcat(metastr.c_str, str);
    }


    template<typename CharType, size_t... indexes, size_t N>
    constexpr auto operator+(const CharType (&str)[N], meta_str_type<CharType, indexes...> metastr)
        -> decltype(metastr + meta_str(str))
    {
        return strcat(str, metastr.c_str);
    }

}
}


#endif
