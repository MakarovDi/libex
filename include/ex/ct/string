#ifndef	   EX_CT_STRING_H
#	define EX_CT_STRING_H


#include "ex/ct/meta_str"
#include "ex/ct/char"
#include "ex/ct/strcat"
#include "ex/ct/streq"
#include "ex/ct/strfill"


//
// Note: compile-time string operations
//
//
// Usage:
//
//     1. static_assert(contains_char(__FILE__, '.'));
//
//     2. constexpr static const auto kModuleTag = "[" + ct::basename(__FILE__) + "]";
//                ...
//        log.warning(kModuleTag, "warning: ", ...);
//
//     3. constexpr static const auto kString = ct::meta_str("qwerty") + "1234567890" + ...;
//
//
// References: 
//   https://akrzemi1.wordpress.com/2011/05/06/compile-time-computations
//   docs/const_func/Compile-time computations - Andrzej's C++ blog.pdf
//   docs/schurr_cpp11_tools_for_class_authors.pdf, p.24
//

namespace ex
{
namespace ct // compile-time
{

    template <typename CharType, size_t N>
    constexpr size_t strlen(const CharType (&str)[N])
    {
        return N - 1;
    }


}
}

//    [unit tests]

//    inline void _unit_tests()
//    {
//        static_assert(substr<2>("Test") == "st");
//        static_assert(substr<2>(L"Test") == L"st");
//
//        static_assert(strlchr("test", 't') == 0);
//        static_assert(strlchr("test", 'a') == ct::npos);
//        static_assert(strlchr("", 'a') == ct::npos);
//
//        static_assert(strlchr(L"test", L't') == 0);
//        static_assert(strlchr(L"test", L'a') == ct::npos);
//        static_assert(strlchr(L"", L'a') == ct::npos);
//
//        static_assert(strrchr("test", 't') == 3);
//        static_assert(strrchr("test", 'a') == ct::npos);
//        static_assert(strrchr("", 'a') == ct::npos);
//
//        static_assert(strrchr(L"test", L't') == 3);
//        static_assert(strrchr(L"test", L'a') == ct::npos);
//        static_assert(strrchr(L"", L'a') == ct::npos);
//
//
//        static_assert(ct::streq("Test", "Test"));
//        static_assert(!ct::streq("Test", "Tost"));
//        static_assert(!ct::streq("Test", "Tst"));
//        static_assert(ct::streq("", ""));
//
//        static_assert(ct::streq(L"Test", L"Test"));
//        static_assert(!ct::streq(L"Test", L"Tost"));
//        static_assert(!ct::streq(L"Test", L"Tst"));
//        static_assert(ct::streq(L"", L""));
//
//        static_assert(const_fun::contains_char("test", 'e'), "");
//        static_assert(const_fun::contains_char(L"test", L'e'), "");
//
//        static_assert(char_at<2>("123") == '3', "char_at failure");
//        static_assert(char_at<2>(L"123") == L'3', "char_at failure");
//
//        static_assert(strlen("123") == 3, "failure");
//        static_assert(strlen("") == 0, "failure");
//        static_assert(strlen(L"123") == 3, "failure");
//        static_assert(strlen(L"") == 0, "failure");
//
//        assert(const_fun::contains_char(test1, 't'));
//        assert(const_fun::contains_char(test2, L't'));
//        assert(!const_fun::contains_char(test1, 'd'));
//        assert(const_fun::contains_char(test1, '\0'));
//    }


// [unit tests] meta-str

//    template <typename CharType, size_t N>
//    constexpr size_t len(const CharType (&str)[N])
//    {
//        return N - 1;
//    }
//
//
//    template <typename CharType, size_t N>
//    constexpr auto process_str(const CharType (&str)[N])
//    -> decltype(ct::meta_str(str))
//    {
//        return ct::meta_str(str);
//    }

//    static constexpr auto str_a  =  ct::meta_str("test");
//    static constexpr auto str_w  =  ct::meta_str(L"test");
//    static constexpr auto str1_a =  ct::create_meta_str("test1") + ct::meta_str("test2");
//    static constexpr auto str1_w =  ct::create_meta_str(L"test1") + ct::meta_str(L"test2");
//    static constexpr auto str2_a =  ct::meta_str("test1") + "test2";
//    static constexpr auto str2_w =  ct::meta_str(L"test1") + L"test2";
//    static constexpr auto str3_a =  "test2" + ct::meta_str("test1");
//    static constexpr auto str3_w =  L"test2" + ct::meta_str(L"test1");
//    static constexpr auto str4_a =  "test1" + ct::meta_str("test2") + "test3";
//    static constexpr auto str4_w =  L"test1" + ct::meta_str(L"test2") + L"test3";
//
//    static_assert(str_a.length == 4);
//    static_assert(str_a.c_str != nullptr);
//    static_assert(str4_a.length == str4_w.length);
//    static_assert(len(str4_a.c_str) == len(str4_w.c_str)); // use of compile-time functions with meta_str
//    static_assert(len(process_str("Test").c_str) == 4);
//    static_assert(len(process_str(L"Test").c_str) == 4);

//    static_assert(ct::meta_str("Test") == "Test");
//    static_assert("Test" == ct::meta_str("Test"));
//    static_assert(ct::create_meta_str("Test") == ct::meta_str("Test"));
//
//    static_assert(ct::meta_str(L"Test") == L"Test");
//    static_assert(L"Test" == ct::meta_str(L"Test"));
//    static_assert(ct::create_meta_str(L"Test") == ct::meta_str(L"Test"));

//    static_assert(ct::meta_str("Test")[2] == 's');

#endif
