#ifndef    EX_CONTAINER_POOL_HEADER
#   define EX_CONTAINER_POOL_HEADER


#include <cstdint>
#include <utility>

#include "ex/interface"
#include "ex/policy/pool/destroy"
#include "ex/policy/pool/size"
#include "ex/policy/threading"


namespace ex
{


template
<
    class T,

    class ThreadedModel = policy::SingleThreadModel,
    template <class> class DestroyPolicy   = policy::DebugDestroy,
    template <class> class ExtendingPolicy = policy::ExtendablePool
    // TODO: creation policy (allocator)
>
class ObjectPool final : INonCopyable,
    protected ThreadedModel,
    protected DestroyPolicy<T>,
    protected ExtendingPolicy<T>
{
    template < typename U >
    using shared = typename ThreadedModel::template shared<U>;
    using lock   = typename ThreadedModel::Lock;
public:
    explicit ObjectPool(uint32_t depth) :
        DestroyPolicy<T>(depth),
        ExtendingPolicy<T>(std::bind(&ObjectPool::create_object, this))
    {
        if (!depth)
            throw std::invalid_argument("depth must not be 0");

        reserve(depth);
    }


    ~ObjectPool()
    {
        this->destroy(m_pool_objects);
    }

public:
    T& acquire() // throws
    {
        lock guard;

        T* object;

        if (m_pool_objects.empty())
        {
            object = this->extend_pool();
            this->creation_notice(*object);

            ++m_depth;
        }
        else
        {
            object = m_pool_objects.back();
            m_pool_objects.pop_back();
        }

        this->acquisition_notice(*object);

        return *object;
    }


    void release(T& t) // throws
    {
        lock guard;

        m_pool_objects.push_back(&t);

        this->releasing_notice(t);
    }


    // no-throw
    uint32_t depth() const { return m_depth; }


    // no-throw
    uint32_t available() const
    {
        lock guard;

        return uint32_t(m_pool_objects.size());
    }


    // no-throw
    bool empty() const
    {
        lock guard;

        return m_pool_objects.empty();
    }

public:
    ObjectPool(ObjectPool&&) = default;
    ObjectPool& operator=(ObjectPool&&) = default;
private:
    T* create_object()
    {
        T* object = new T();

        this->creation_notice(*object);

        return object;
    }


    void reserve(uint32_t count)
    {
        m_pool_objects.reserve(count);

        count -= m_pool_objects.size();

        while (count--)
        {
            m_pool_objects.push_back(create_object());
        }

        m_depth = m_pool_objects.size();
    }
private:
    std::vector<T*>  m_pool_objects;
    shared<uint32_t> m_depth;
};


}
#endif // EX_CONTAINER_POOL_HEADER
