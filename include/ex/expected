#ifndef    EX_EXPECTED_HEADER
#   define EX_EXPECTED_HEADER


#include <exception>
#include <stdexcept>
#include <utility>
#include <typeinfo>

#include "ex/common/policy"


//
// Usage
//
//  1. return exception or value:
//
//
//            expected<int> parse_int(const std::string& s)
//            {
//                int result;
//
//                ...
//
//                if (nonDigit)
//                    return expected<int>(std::invalid_argument("not a number"));
//
//                ...
//
//                if (tooManyDigits)
//                    return expected<int>(std::out_of_range("overflow"));
//
//                ...
//
//                return result;
//            }
//
//
//  2. universal error handling:
//
//            auto x = parseInt(str).get(); // throw on error
//
//                or
//
//            auto y = parseInt(str); // wonâ€™t throw
//            if (!y)
//            {
//                // handle some error locally
//                if (y.has_exception<std::invalid_argument>())
//                {
//                    // no digits
//                    ...
//                }
//
//                y.rethrow();
//            }
//
//
//
//  3. absorb exception:
//
//            try
//            {
//                ...
//            }
//            catch(...)
//            {
//                return expected<T>::current_exception();
//            }
//
//
// see:
//      ex/doc/Alexandrescu - Systematic Error Handling in C++
//      ex/doc/Alexandrescu - Expect the Expected
//

namespace ex
{


template<class T>
class expected final
{

    expected() {}

public:
    expected(const T& rhs) :
        m_value(rhs),
        m_have_value(true)
    {
    }


    expected(T&& rhs) :
        m_value(std::move(rhs)),
        m_have_value(true)
    {
    }


    expected(const expected& rhs) : m_have_value(rhs.m_have_value)
    {
        if(m_have_value)
            new(&m_value) T(rhs.m_value);
        else
            new(&m_exception) std::exception_ptr(rhs.m_exception);
    }


    expected(expected&& rhs) : m_have_value(rhs.m_have_value)
    {
        if(m_have_value)
            new(&m_value) T(std::move(rhs.m_value));
        else
            new(&m_exception) std::exception_ptr(std::move(rhs.m_exception));
    }


    template<class E>
    expected(const E& exception) : m_have_value(false)
    {
        if (typeid(exception) != typeid(E))
            ex::policy::DefaultNotice::notice("slicing detected");

        new(&m_exception) std::exception_ptr(std::move(std::make_exception_ptr(exception)));
    }


    explicit expected(std::exception_ptr p) :
        m_have_value(false),
        m_exception(std::move(p))
    {
    }


    ~expected()
    {
        using std::exception_ptr;

        if (m_have_value)
            m_value.~T();
        else
            m_exception.~exception_ptr();
    }


    void swap(expected& rhs)
    {
        if(m_have_value)
        {
            if(rhs.m_have_value)
            {
                using std::swap;
                swap(m_value, rhs.m_value);
            }
            else
            {
                auto tmp = std::move(rhs.m_exception);
                new(&rhs.m_value) T(std::move(m_value));
                new(&m_exception) std::exception_ptr(tmp);

                std::swap(m_have_value, rhs.m_have_value);
            }
        }
        else
        {
            if(rhs.m_have_value)
            {
                rhs.swap(*this);
            }
            else
            {
                using std::swap;
                swap(m_exception, rhs.m_exception);

                std::swap(m_have_value, rhs.m_have_value);
            }
        }
    }


    operator bool() const
    {
        return is_valid();
    }


    bool is_valid() const
    {
        return m_have_value;
    }


    T& get()
    {
        if(!m_have_value)
            std::rethrow_exception(m_exception);

        return m_value;
    }


    const T& get() const
    {
        if(!m_have_value)
            std::rethrow_exception(m_exception);

        return m_value;
    }


    void rethrow() const
    {
        std::rethrow_exception(m_exception);
    }


    template<class E>
    bool has_exception() const
    {
        try
        {
            if(!m_have_value) std::rethrow_exception(m_exception);
        }
        catch(const E&)
        {
            return true;
        }
        catch(...)
        {
        }

        return false;
    }


public:

    static expected<T> current_exception()
    {
        return expected<T>(std::current_exception());
    }


    template<class F>
    static expected from_code(F fun)
    {
        try
        {
            return expected(fun());
        }
        catch(...)
        {
            return expected<T>::current_exception();
        }
    }

private:
    union
    {
        T m_value;
        std::exception_ptr m_exception;
    };

    bool m_have_value;
};



template<typename T>
void swap(expected<T>& e1, expected<T>& e2)
{
    e1.swap(e2);
}


}


#endif