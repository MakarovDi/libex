#ifndef    EX_SCOPEGUARD_HEADER
#   define EX_SCOPEGUARD_HEADER


#include <utility>
#include "ex/macro"


//
// see: ex/doc/Alexandrescu - Systematic Error Handling in C++
//


namespace ex
{


template<class Fun>
class ScopeGuard
{
    Fun  m_function;
    bool m_active;
public:
    ScopeGuard(Fun f) : m_function(std::move(f)), m_active(true) { }


    ScopeGuard(ScopeGuard&& rhs) :
        m_function(std::move(rhs.m_function)),
        m_active(rhs.m_active)
    {
        rhs.dismiss();
    }


    ~ScopeGuard()
    {
        if (m_active) m_function();
    }


    void dismiss() { m_active = false; }


    ScopeGuard() = delete;
    ScopeGuard(const ScopeGuard&) = delete;
    ScopeGuard& operator=(const ScopeGuard&) = delete;
};


template<class Fun>
ScopeGuard<Fun> MakeGuard(Fun f)
{
    return ScopeGuard<Fun>(std::move(f));
}


namespace hidden
{
    enum ScopeGuardOnExit {};

    template<typename Fun>
    ScopeGuard<Fun>	operator+(ScopeGuardOnExit, Fun &&fn)
    {
        return ScopeGuard<Fun>(std::forward<Fun>(fn));
    }
}


#define SCOPE_EXIT \
    auto ANONYMOUS_VARIABLE(SCOPE_EXIT_STATE) = ex::hidden::ScopeGuardOnExit() + [&]()

}


#endif