#ifndef    EX_POLICY_INDEX_CHECK_HEADER
#   define EX_POLICY_INDEX_CHECK_HEADER


#include <stdexcept>
#include "ex/assert"


namespace ex
{

namespace policy
{


template <typename T>
class IndexCheckThrow
{
    IndexCheckThrow()  = delete;
    ~IndexCheckThrow() = delete;
public:

    static void check(T index, T max_index)
    {
        if (index > max_index)
            throw std::out_of_range("index out of range");
    }


    static void check(T index, T min_index, T max_index)
    {
        if (index > max_index || index < min_index)
            throw std::out_of_range("index out of range");
    }
};


template <typename T>
class IndexCheckNo
{
    IndexCheckNo()  = delete;
    ~IndexCheckNo() = delete;
public:
    static void check(T, T)    { }
    static void check(T, T, T) { }
};


template <typename T>
class IndexCheckAssert
{
    IndexCheckAssert()  = delete;
    ~IndexCheckAssert() = delete;
public:

    static void check(T index, T max_index)
    {
        ASSERT(index <= max_index, "index out of range");
    }

    static void check(T index, T min_index, T max_index)
    {
        ASSERT(index <= max_index && index >= min_index, "index out of range");
    }
};

// TODO: template <typename T> class IndexCheckLog

}
}
#endif // EX_POLICY_INDEX_CHECK_HEADER