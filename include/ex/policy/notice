#ifndef    EX_POLICY_NOTICE_H
#   define EX_POLICY_NOTICE_H


#include <iostream>


namespace ex
{
namespace policy
{


template < class Exception >
struct ThrowNotice
{
    static void notice(const char* message)
    {
        throw Exception(message);
    }

protected:
    ThrowNotice()  {}
    ~ThrowNotice() {}
};


struct StderrNotice
{
    static void notice(const char* message)
    {
        std::cerr << message << std::endl;
    }

protected:
    StderrNotice()  {}
    ~StderrNotice() {}
};


template < class Exception >
struct DebugNotice
{
    static void notice(const char* message)
    {
    #ifndef NDEBUG
        throw Exception(message);
    #endif
    }

protected:
    DebugNotice()  {}
    ~DebugNotice() {}
};


struct FatalNotice
{
    static void notice(const char* message)
    {
        std::cerr << message << std::endl;
        abort();
    }

protected:
    FatalNotice()  {}
    ~FatalNotice() {}
};


struct NoNotice
{
    static void notice(const char*)
    {
    }

protected:
    NoNotice()  {}
    ~NoNotice() {}
};


// TODO: LogNotice


}
}

#endif // EX_POLICY_NOTICE_H
