#ifndef    EX_STRING_HEADER
#   define EX_STRING_HEADER


//
// Note: module for maintain encoding-independent projects
//
// Using:
//
//      const Char* test = L("Some Text");
//
//      It will translated in dependent of UNICODE definition.
//
//      UNICODE undefined:
//
//      ->  const char* test = "Some Text";
//
//      UNICODE defined:
//
//      ->  const wchar_t* test = L"Some Text";
//


#include <string>
#include <memory>
#include <sstream>


// Generates universal unicode defenition
#if defined(UNICODE) || defined(_UNICODE)
#   undef  UNICODE
#   define UNICODE
#endif


#ifdef L
#   undef L
#   warning "L macro already defined -> undef"
#endif




#ifdef UNICODE
#  define __L(s) L##s
#else
#  define __L(s) s
#endif

// L - conversion to project's encoding
#define L(S)    __L(S)


namespace ex
{

    // Char - char-type which depends on project's encoding
#ifdef UNICODE
    using Char = wchar_t;
#else
    using Char = char;
#endif


    // C++ strings
    using StringA  = std::string;
    using StringW  = std::wstring;
    using String   = std::basic_string<Char>;


    // C++ string streams
    using StringStreamA = std::stringstream;
    using StringStreamW = std::wstringstream;
    using StringStream  = std::basic_stringstream<Char>;


    // C-like safe strings
    using CStringA = std::unique_ptr<char[]>;
    using CStringW = std::unique_ptr<wchar_t[]>;
    using CString  = std::unique_ptr<Char[]>;


    namespace string
    {
        extern const Char*  empty;  // represent empty string
    }

}


#endif