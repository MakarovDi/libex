#ifndef    EX_WINDOW_HEADER
#   define EX_WINDOW_HEADER

#include <stdexcept>
#include <type_traits>
#include <iterator>

#include "ex/common/type"
#include "ex/assert"
#include "ex/iterator/make"
#include "ex/meta/traits"
#include "ex/algo"


namespace ex
{


namespace internal
{

//
// TODO:
//   1. improve any_iterator (eliminate virtual -> CTRP)
//   2. integrate any_iterator
//   3. remove template parameter ConstIterator
//

template <typename T, typename Facade, typename ConstIterator=const T*>
class ExtremumWindow final : public Facade
{
public:
    ExtremumWindow(index_t window_size, ConstIterator begin, ConstIterator end) :
        m_data_begin(begin),
        m_data_end(end),
        m_window_first(begin),
        m_window_last(end),
        m_window_extremum(),
        m_array_size(std::distance(begin, end)),
        m_window_size(window_size),
        m_current_size(window_size)
    {
        if (m_window_size <= 0 || m_array_size <= 0)
            throw std::logic_error("invalid size");
    }


    template <index_t N>
    ExtremumWindow(index_t window_size, const T (&data)[N]) :
        ExtremumWindow(window_size, std::begin(data), std::end(data))
    {
    }


    ExtremumWindow(index_t window_size, ConstIterator data_begin, index_t data_size) :
        ExtremumWindow(window_size, data_begin, data_begin + data_size)
    {
    }

public:
    void next()
    {
        if (m_window_last == m_data_end)
        {
            m_window_last = m_data_begin;
            m_window_extremum = m_data_begin;
            return;
        }

        if (m_window_last < m_data_end - 1)
        {
            ++m_window_last;

            if (this->is_extremum(*m_window_last, *m_window_extremum))
            {
                m_window_extremum = m_window_last;
            }

            if (count() > size())
            {
                update_start_pointer();
            }
        }
        else
        {
            update_start_pointer();
        }
    }


    void reset()
    {
        m_current_size = m_window_size;
        m_window_first = m_data_begin;
        m_window_last  = m_data_end;
    }


public:
    index_t size()  const { return m_window_size; }
    index_t count() const { return std::distance(m_window_first, m_window_last) + 1; }

protected:
    friend Facade;

public:
    index_t extremum_index() const
    {
        ex::assert(count() > 0, "window should not be empty");
        return std::distance(m_data_begin, m_window_extremum);
    }


    ConstIterator extremum_iterator() const // TODO: fix -> non const iterator
    {
        ex::assert(count() > 0, "window should not be empty");
        return m_window_extremum;
    }


    const T& extremum() const
    {
        ex::assert(count() > 0, "window should not be empty");
        return *m_window_extremum;
    }

private:
    void update_start_pointer()
    {
        if (m_current_size > m_array_size)
        {
            --m_current_size;
            return;
        }

        ++m_window_first;

        if (m_window_extremum >= m_window_first)
        {
            return;
        }

        m_window_extremum = this->find_extremum(m_window_first, m_window_last + 1);
    }

private:
    ConstIterator m_data_begin;
    ConstIterator m_data_end;
    ConstIterator m_window_first;
    ConstIterator m_window_last;
    ConstIterator m_window_extremum;

    index_t  m_array_size;
    index_t  m_window_size;
    index_t  m_current_size;
};


template <typename T>
class MinFacade
{
    using Window = ExtremumWindow<T, MinFacade<T>>;

public:
    auto     minimum_iterator() const -> decltype(auto) { return self().extremum_iterator(); }
    index_t  minimum_index()    const { return self().extremum_index(); }
    const T& minimum()          const { return self().extremum();       }

protected:
    template <typename ForwardIterator>
    ForwardIterator find_extremum(ForwardIterator start, ForwardIterator end)
    {
        return ex::last_min_element(start, end);
    }


    bool is_extremum(const T& value, const T& current_extremum) const
    {
        return value <= current_extremum;
    }

protected:
    MinFacade()  = default;
    ~MinFacade() = default;

private:
    const Window& self() const { return *static_cast<const Window*>(this); }
};


template <typename T>
class MaxFacade
{
    using Window = ExtremumWindow<T, MaxFacade<T>>;

public:
    auto     maximum_iterator() const -> decltype(auto)  { return self().extremum_iterator(); }
    index_t  maximum_index()    const { return self().extremum_index(); }
    const T& maximum()          const { return self().extremum();       }

protected:
    template <typename ForwardIterator>
    ForwardIterator find_extremum(ForwardIterator start, ForwardIterator end)
    {
        return ex::last_max_element(start, end);
    }


    bool is_extremum(const T& value, const T& current_extremum) const
    {
        return value >= current_extremum;
    }

protected:
    MaxFacade()  = default;
    ~MaxFacade() = default;

private:
    const Window& self() const { return *static_cast<const Window*>(this); }
};


}


template <typename T, class ConstIterator=const T*>
using MinWindow = internal::ExtremumWindow<T, internal::MinFacade<T>, ConstIterator>;


template <typename T, class ConstIterator=const T*>
using MaxWindow = internal::ExtremumWindow<T, internal::MaxFacade<T>, ConstIterator>;


}
#endif // EX_WINDOW_HEADER
