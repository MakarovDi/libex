#ifndef    EX_ASSERT_HEADER
#   define EX_ASSERT_HEADER

#include <type_traits>
#include <exception>

#include "ex/common/policy"


#ifdef assert
#   undef assert
#endif


namespace ex
{


namespace internal
{

    template <typename Notice, bool is_exception = std::is_base_of<std::exception, Notice>::value>
    struct assert_trait
    {
        static void notify(const char* message)
        {
            Notice::notify(message);
        }
    };


    template <typename Exception>
    struct assert_trait<Exception, true>
    {
        static void notify(const char* message)
        {
            throw Exception(message);
        }
    };

}


template <typename Notice = ex::policy::DefaultNotice>
void assert(bool statement, const char* message)
{
    if (!statement)
        internal::assert_trait<Notice>::notify(message);
}


template <typename Notice = ex::policy::DefaultNotice, typename T>
void assert_equal(const T& t1, const T& t2)
{
    //
    // hint for microsoft compiler not to do t1 != t2 in case when Notice::notify is empty function
    //
    if (Notice::is_empty) return; // TODO: remove it when ms vc will be not so stupid (last check VS2017)

    if (&t1 != &t2 && t1 != t2)
    {
        Notice::notify("objects must be same");
    }
}



template <typename Notice = ex::policy::DefaultNotice>
void failure(const char* message)
{
    ex::assert(false, message);
}


}

#endif
