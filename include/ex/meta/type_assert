#ifndef    EX_META_TYPE_ASSERT_H
#   define EX_META_TYPE_ASSERT_H

#include <type_traits>
#include "ex/macro"

//
// Note: compile-time types constrains
//
//
// Usage:
//
//        template
//        <
//            size_t   GridSize,
//            template <size_t> class AxisX,
//            template <size_t> class AxisY,
//            template <size_t> class AxisZ
//        >
//        struct UniformGrid3 final
//        {
//            using GridType = typename TAxisX<GridSize>::AxisType;
//
//            ...
//
//        private:
//            // Only arithmetic types are allowed
//            TYPE_ASSERT(std::is_arithmetic<GridType>::value);
//
//            // AxisTypes must be the same for all Axis (GridType)
//            TYPE_ASSERT_SAME(typename AxisX::AxisType, typename AxisY::AxisType);
//            TYPE_ASSERT_SAME(typename AxisX::AxisType, typename AxisZ::AxisType);
//
//            // steps along the axis must be the same for uniform grid
//            TYPE_ASSERT(AxisX::step == AxisY::step && AxisX::step == AxisZ::step);
//        };
//


#define TYPE_ASSERT(assertion) \
    using UNIQUE_ID(type_assert) = typename std::enable_if< (assertion) == true >::type;


#define TYPE_ASSERT_SAME(T1, T2) \
    using UNIQUE_ID(type_assert) = typename std::enable_if< std::is_same<T1, T2>::value == true >::type;


#endif