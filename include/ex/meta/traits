#ifndef    EX_META_TRAITS_HEADER
#   define EX_META_TRAITS_HEADER

#include <type_traits>
#include <utility>


namespace ex
{


template<class T>
struct has_index_operator final
{
    has_index_operator()  = delete;
    ~has_index_operator() = delete;
private:
    template <typename U>
    static auto test(U*)  noexcept -> decltype(std::declval<U>()[0]) { return {}; }

    template <typename>
    static auto test(...) noexcept -> std::false_type { return {}; }

public:
    static constexpr bool value = !std::is_same< decltype(test<T>(nullptr)), std::false_type >::value;
};


template <class T, bool=std::is_pointer<T>::value>
class iterator_type;

template <class T>
class iterator_type<T, true>
{
public:
    using type = T;
};

template <class T>
class iterator_type<T, false>
{
    static auto test_container(T&& container) -> decltype(auto)
    {
        using std::begin;
        return begin( container );
    }
public:
    using type = decltype(test_container(std::declval<T>()));
};


//
// strip_type = type without any modificators: reference, pointer, const, ...
//

template<typename T>
struct strip_type
{
    using type = typename std::remove_pointer< typename std::decay<T>::type >::type;
};



}
#endif // EX_META_TRAITS_HEADER
