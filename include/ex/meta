#ifndef     EX_MP_H
#   define  EX_MP_H


#include <cstdint>


namespace ex
{
namespace meta // template meta programming
{

    //
    // Usage:
    //
    //  template <size_t K, size_t N>
    //  constexpr const char* get_first_k(const char (&str)[N])
    //  {
    //      return get_first_k_impl(str, make_integer_sequence<K>{});
    //  }
    //
    //
    //  template <size_t... indexes, size_t N>
    //  constexpr const char* get_first_k_implconst char (&str)[N], integer_sequence<indexe...>)
    //  {
    //      return { str[indexes]... };
    //  }
    //
    //

    template <size_t...>
    struct integer_sequence
    {
        using type = integer_sequence;
    };


    template<size_t N, size_t offset, size_t... Is>
    struct make_integer_seq : make_integer_seq<N-1, offset, N-1, Is...>
    {
    };


    template<size_t offset, size_t... Is>
    struct make_integer_seq<offset, offset, Is...> : integer_sequence<Is...>
    {
    };


    template <size_t N, size_t offset = 0>
    using make_integer_sequence = typename make_integer_seq<N, offset>::type;


    //
    // Usage:
    //
    //  You can't do
    //
    //      void do_smth(char... char)
    //
    //
    //  but you can do this
    //
    //      template <size_t... indexes>
    //      void do_smth<pack<char, indexes>... chars>
    //
    //


    template<typename T, size_t index>
    using pack = T;

}
}


#endif
